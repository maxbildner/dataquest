{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green0\blue7;\red25\green60\blue255;}
{\*\expandedcolortbl;;\cssrgb\c100000\c12195\c0;\cssrgb\c12594\c35385\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww17760\viewh19080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b\fs32 \cf0 1/25/21\
1-1-4: Step 1, Part 1, Section 4\

\f1\b0 DATA QUEST COURSE 1: Python for Data Science: Fundamentals
\f0\b \
\pard\pardeftab560\slleading20\partightenfactor0

\f2 \cf0 Module 4: \ul Conditionals
\f3\b0 \ulnone \
\pard\tx720\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 1) \cf2 if statement\
\cf0 Example:\
	num = 0\
	\cf3 if num == 0:\cf0 \
		print(\'91yay\'92)\
\
\
2) == comparison operator\
\pard\tx220\tx720\pardeftab560\li720\fi-720\slleading20\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}compares values NOT memory locations\
\pard\tx940\tx1440\pardeftab560\li1440\fi-1440\slleading20\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}JS compares memory locations unless primitives (number, string, \'85 )\
\pard\tx220\tx720\pardeftab560\li720\fi-720\slleading20\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}note* integers seem to be casted to floats and then compared?\
{\listtext	\uc0\u8259 	}Ex:\
\pard\tx940\tx1440\pardeftab560\li1440\fi-1440\slleading20\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}arr1 = [ 1, 2.0 ]\
{\listtext	\uc0\u8259 	}arr2 = [ 1, 2 ]\
{\listtext	\uc0\u8259 	}arr1 \cf3 ==\cf0  arr2		#=> True\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
3) AND (logical operator)\
Ex:\
	if a == b \cf3 and\cf0  a == c:\
\
\
4) OR (logical operator)\
Ex:\
	if a == b \cf3 or\cf0  a == c:\
\
\
5) NOT (logical operator)\
\pard\tx220\tx720\pardeftab560\li720\fi-720\slleading20\partightenfactor0
\cf0 	\uc0\u8259 	similar to JS !\
Ex:\
	a = True\
	if (\cf2 not\cf0  a):\
		print (\'91yep\'92)\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
6) Operator Precedence\
https://www.mathcs.emory.edu/~valerie/courses/fall10/155/resources/op_precedence.html\
- from highest to lowest: 	\cf2 ( )  >  *, /   >  not  >  and  >  or\cf0 \
- Note and is evaluated first below. The two lines are equivalent (same in JS)\
Ex:\
	1 == 1  or  2 == 2  and 1 == 2		#=> True\
	1 == 1  or  (2 == 2  and 1 == 2)		#=> True\
\
\
7) if \'85 else\
Ex:\
	a = 1\
	if a == 1:\
		print(\'91yep\'92)\
	else:\
		print(\'91nope\'92)\
\
\
8) if \'85 elif \'85 elif \'85 else:\
Ex:\
	if a == 1:\
		print(1)\
	elif a == 2:\
		print(2)\
	elif a == 3:\
		print(3)\
	else:\
\
\
QUESTIONS\
- \
}