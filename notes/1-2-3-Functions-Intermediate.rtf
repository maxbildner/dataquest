{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green0\blue7;\red25\green60\blue255;\red251\green0\blue7;
}
{\*\expandedcolortbl;;\cssrgb\c100000\c12195\c0;\cssrgb\c12594\c35385\c100000;\cssrgb\c100000\c12195\c0;
}
\margl1440\margr1440\vieww13660\viewh16080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b\fs32 \cf0 9/2/21\
1-2-3: Step 1, Part 2, Section 3\

\f1\b0 DATA QUEST COURSE 1: Python for Data Science: Fundamentals Part II
\f0\b \
\pard\pardeftab560\slleading20\partightenfactor0

\f2 \cf0 Module 7: \ul Functions: Intermediate
\f3\b0 \ulnone \
\pard\tx720\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 1) \cf2 del function_name\
\cf0 - deletes function \
- if you\'92ve overwritten a built in function (ex. max()), then the function definition \
will revert to the original definition\
\
\
2) Good python practices\
- don\'92t name functions built in function names (ex. max( ) )\
- don\'92t name variables that are the names of built-in functions\
- most built in code editors highlight built-in function names\
Python Docs for Built-in Functions:\
\cf3 https://docs.python.org/3/library/functions.html\cf0 \
- re: function definitions in python docs- everything in square brackets is optional\
Ex. \
	round( number[, ndigits ] )\
- the second parameter ndigits is optional\
\
\
3) \cf4 Tuple\cf0 \
- datatype like a list\
	- similarities to list: ordered, can have positive/negative indexing\
	- difference: IMMUTABLE (can\'92t modify values, can modify nested values if allowed)\
- parenthesis optional\
Ex. \
	a_tuple = (1, \'91a\'92)\
	another_tuple = 2, \'91b\'92			\
\
\
4) Returning more than one value in a function:\
- use comma to separate values (parenthesis optional)\
- python will automatically return a Tuple\
Ex. \
	def test():\
		return \'91a\'92, \'91b\'92\
\
	print(test())			#=> (\'91a\'92, \'91b\'92)\
	print(test()[0])		#=> \'91a\'92\
\
\
5) Single line multi-variable assignment\
- can do the following below with lists also (can\'92t do exactly this in JS)\
Ex.\
	a_tuple = 1, 2\
	first_num, second_num = a_tuple\
	print(first_num)			#=> 1\
	print(second_num)		#=> 2\
\
\
6) Functions without return value, automatically return \cf4 None Data\cf0  type (like null in JS)\
- new instances of None point to same object in memory\
\
\
7) \cf4 Scope\cf0 \
- part of the program where we can access a variable (like in JS)\
- \cf4 Global Scope\cf0  = variables defined in main program\
- \cf4 Local Scope\cf0  = Ex. Variables defined inside a function\
\
\
8) Scoping in Python\
- outward looking like in JS\
- we can access variables defined in a higher scope \
Ex. In a function we can access a variable defined outside the function\
- We can\'92t access variables defined in a lower scope\
Ex. In main, we can\'92t access a variable defined in a function\
- python looks in the local scope first for variables before looking outward\
\
\
9) functions are NOT hoisted like in JS\
- They need to be declared before they are used\
- Note* JS \ul anonymous functions\ulnone  (\ul function expressions\ulnone ) can\'92t be used before they are declared\
  Only \ul named functions\ulnone  (\ul function declarations\ulnone ) can be used before declared in JS\
\
\
\
\
\
QUESTIONS\
- \
}