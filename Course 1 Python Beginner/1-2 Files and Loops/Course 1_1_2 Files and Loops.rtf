{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green121\blue165;\red38\green255\blue255;\red255\green255\blue254;
\red251\green0\blue7;\red61\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red88\green88\blue88;
\red88\green88\blue88;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c47451\c64706;\cssrgb\c8302\c100000\c100000;\cssrgb\c100000\c100000\c99817\c0;
\cssrgb\c100000\c12195\c0;\cssrgb\c25530\c100000\c100000;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c99985\c0;\cssrgb\c42053\c42053\c41948;
\cssrgb\c42007\c42007\c41955;\cssrgb\c0\c1\c1;}
\margl1440\margr1440\vieww14640\viewh24040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Dataquest Notes\
12-27-18\
Course 1_1_2: Python Programming Beginner\
Python Files and Loops\
\
1. 
\f1\b \cf2 open()\cf0  
\f0\b0 function. Opens a file in python. \
Arguments: Accepts 2 different arguments in the following order: \
	1) name of the file (as a string) 2) mode of working with the file (as a string)\
	use 
\f1\b \cf3 \cb4 \'91r\'92
\f0\b0 \cb1  \cf0 mode for reading in files\
Returns a file object, which we can store to variable to refer to it later\
ex:\
	\cf5 >>> f = open(\'93story.txt\'94, \'93r\'94)\cf0 \
	NOTE* f won\'92t contain the actual file contents, just an object that acts like a placeholder to the file contents\
	NOTE* file that you open must be in same path/folder as the existing .py file you\'92re in\
\
2. 
\f1\b \cf6 read() 
\f0\b0 \cf0 method. \
Returns a string representation of the text you opened (returns a value instead of modifying the object like append() method)\
ex:\
	\cf5 >>> f = open(\'93story.txt\'94, \'93r\'94)\
	>>> data = f.read()\cf0 \
NOTE* each line in the dataset is separated by the string 
\f1\b \cf6 \\n 
\f0\b0 \cf0 which is the new-line character. the text-editor automatically puts in a new line so you don\'92t see the \\n character. \
NOTE* \cf7 \cb8 f\cf7 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 ile.read(n) \'96 This method reads n number of characters from the file, or if n is blank it reads the entire file.\cf7 \cb1 \strokec10 \
\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
3. 
\f1\b \cf3 delimiter
\f0\b0 \cf0  = separator like a , or \\n\
\
4. 
\f1\b \cf3 split()
\f0\b0 \cf0  method. takes a string input delimiter and returns a list of split elements\
ex.\
	\cf5 >>> fruit = \'93apple,banana,pear\'94\
	>>> split_fruit = fruit.split(\'93,\'94)\
	# split_fruit = [\'93apple\'94, \'93banana\'94, \'93pear\'94]\cf0 \
\
5. 
\f1\b \cf6 for ___ in ___: 
\f0\b0 \cf0 loop\
first blank = ___ \ul iterator\ulnone  variable which is a temporary variable name (only accessible within the for loop)\
second blank = \ul sequence\ulnone  variable (can be list) that you want to iterate over\
ex1:\
	\cf5 >>> fruit = [\'93kiwi\'94, \'93apple\'94, \'93lichee\'94]\
	>>> for blahblahblahTempVariable in fruit:\
	>>>     print(blahblahblahTempVariable)\
	\cf11 output:\
	kiwi\
	apple\
	lichee\cf0 \
NOTE* how the body inside the for loop must be indented 4 spaces consistently\
	^ assigns value at index 0 of fruit to blahblahblahTempVariable\
	\'93kiwi\'94 is assigned to blahblahblahTempVariable\
	^ runs body of loop print(\'93kiwi\'94)\
	^ assigns next value at index 1 of fruit list to blahblahblahTempVariable\
	\'93apple\'94 is assigned to blahblahblahTempVariable\
	\'85 \
ex2:\
	\cf5 >>> crypto_prices = [\'93bitcoin,3000\'94, \'93ETH,120\'94, \'93XRP,.44\'94]\
	>>> final_list = []\
	>>> for tempVariable in crypto_prices:\
	>>>     split_list = tempVariable.split(\'93,\'94)\
	>>>     final_list.append(split_list)\
	>>> print(final_list)\cf0 \
	output:\
	final_list = [\'93bitcoin\'94, \'933000\'94, \'93ETH\'94, \'93120\'94, \'93XRP\'94, \'93.44\'94]\
\
6. Accessing elements in a list of lists using double bracket notation [ ][[ ]\
ex. \
	\cf5 >>> final_list = [[\'93bitcoin\'94, \'933000\'94], [\'93ETH\'94, \'93120\'94], [\'93XRP\'94, \'93.44\'94]]\
	>>> final_list[0]\
\cf11 	output: \
	[\'93bitcoin\'94, \'933000\'94]\cf5 \
\
	>>> final_list = [[\'93bitcoin\'94, \'933000\'94], [\'93ETH\'94, \'93120\'94], [\'93XRP\'94, \'93.44\'94]]\
	>>> first_list_first_value = final_list[0]\
	\cf11 output:\
	\'93bitcoin\'94\cf5 \
	\cf11 or\cf5 \
	>>> final_list[0][0]\
	\cf11 output:\
	\'93bitcoin\'94\cf5 \
\cf0 \
\
7. convert data types\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 int()	\cf0 	converts arguments to integer value\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf6 float() \cf0 	converts arguments to float value\
\cf6 str()	\cf0 	converts arguments to string value\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Questions
\f0\b0 \
1. how do you open files in different folders/paths from the .py file you\'92re in?\
\
}