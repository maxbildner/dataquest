{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red36\green255\blue255;\red0\green0\blue0;\red251\green0\blue7;
}
{\*\expandedcolortbl;;\cssrgb\c4983\c100000\c100000;\cssrgb\c0\c1\c1;\cssrgb\c100000\c12195\c0;
}
\margl1440\margr1440\vieww14640\viewh13640\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Dataquest Notes\
12-30-18\
Course 1_1_7: Python Programming Beginner\
Intro to Functions\
\
1. 
\f1\b \ul Functions
\f0\b0 \ulnone \
- allow us to reuse code (can be more efficient/easier to read)\
- i
\f1\b \ul nformation hiding
\f0\b0 \ulnone - allow us hide how a function works\
- 
\f1\b \ul modularity
\f0\b0 \ulnone - allows us to break down complex logic into smaller components or modules (good for working with teams)\
- 
\f1\b \ul abstraction
\f0\b0 \ulnone - makes code more manageable/easier to maintain, can reuse functions across multiple scenarios in project \
- 
\f1\b \ul built-in functions
\f0\b0 \ulnone - functions that python have defined for us like print()\
\
\
2. How to make a function\

\f1\b \cf2 def ____ (____):\
\
	return ____
\f0\b0 \cf0 \
\
\cf2 def \cf3 name\cf2  (\cf3 arguments\cf2 ):\
	\cf3 body\cf2 \
	return \cf3 ____\cf2 \
\cf0 \
name- name of function\
arguments- input value(s) that go into the function\
body- code that the function does\
_____ - return value that the function to the user when the function finishes\
NOTE* tab indent = 4 spaces\
\
\
3. 
\f1\b \ul body variables
\f0\b0  \ulnone AND\ul  
\f1\b input argument name
\f0\b0  \ulnone are\ul  temporary variables \ulnone (only accessible inside the function)\
\
\
4. Functions can have multiple return statements\
\
\
5. Order in which you pass in arguments matters for default positional arguments!! \
- We can use 
\f1\b \cf2 \ul \ulc2 named arguments
\f0\b0 \cf0 \ulnone  instead of 
\f1\b \ul positional arguments
\f0\b0 \ulnone  so that order doesn\'92t matter\
- naming arguments does not add any functionality but does make code easier to read (good for working in teams)\
see section 5 for details\
ex.\
	\cf4 >>>  	AAPL = [150, \'91hold\'92, .14]   		# price, rating, short-interest (i.e. %float short)\
	>>>   TSLA = [333, \'91sell\'92, .12]\
	>>> 	def check_detail(ticker, index): 	# takes in ticker, position of detail i want to lookup, returns detail\
			return ticker[index]\
	>>> 	print(check_detail(index = 1, ticker = TSLA))\cf0 \
	output:\
	sell\
\
\
6. \cf2 Optional Arguments\
\cf3 - optional arguments in a function that have default values that they take on unless a different value is provided by the user\
ex. \
\
\
7. Functions in Functions\
\
\
\cf0 \
\
\

\f1\b Questions\

\f0\b0 1. Still don\'92t understand what abstraction is\
\
2. if a function returns something, and i don\'92t store it, what happens to it? where is it stored?\
\
3. do pros eventually get to read and understand code as fast as reading and understanding english?\
Is it possible to skim code and understand it?\
\
\
}