{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica-BoldOblique;
\f3\fswiss\fcharset0 Helvetica-Oblique;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green121\blue165;\red251\green0\blue7;\red251\green0\blue7;
\red0\green90\blue124;\red202\green202\blue202;\red23\green23\blue23;\red194\green126\blue101;\red212\green214\blue154;
\red167\green197\blue152;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c47451\c64706;\cssrgb\c100000\c12195\c0;\cssrgb\c100000\c12195\c0;
\csgenericrgb\c0\c35294\c48627;\cssrgb\c83137\c83137\c83137;\cssrgb\c11765\c11765\c11765;\cssrgb\c80784\c56863\c47059;\cssrgb\c86275\c86275\c66667;
\cssrgb\c70980\c80784\c65882;}
\margl1440\margr1440\vieww14640\viewh24040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Dataquest Notes\
7/14/18\
Course 1_1: Python Programming Beginner\
Python Basics\
\
- Python is interpreted language (not compiled, i.e. doesn\'92t need to be translated by CPU)\
\
- 
\f1\b integers
\f0\b0 : -1, 0, 1\'85\
- 
\f1\b float
\f0\b0 : fractional (or decimal) values like 3.5, -1.0\'85\
- 
\f1\b string
\f0\b0 : represents text. Use single \'91 or double \'93 quotes\
\
- \cf2 type()\cf0  function. Similar to print(), you pass a value or variable into the function and it returns the data type as a value. Example: \
	>> hello = 'Hello'\
	>> hello_type = type(hello)\
	>> print(hello_type)\
		<class \'91str\'92>\
\
- str above is short for string\
\
- 
\f1\b lists: 
\f0\b0 a list of items. Use brackets [] separated by commas , ex:\
	>>> grades = [88, 50, 30]\
Python doesn\'92t seem to have built in support for arrays, but lists can be used instead\
\
\
- can also create lists like this\
	>>> grades = []\
	>>> grades.append(88)\
	>>> grades.append(50)\
	>>> grades\
		grades = [88, 50]\
\
\
- 
\f2\i\b \cf2 list
\f1\i0 .append() \cf0 method. 
\f0\b0 Accepts only 1 argument and adds it to the end of list object. Unlike functions, methods are called using dot notation . on a specific object. Example:\
	\cf3 >>> grades = [88, 50, 30]\
	>>> grades.append(56)\
	>>> grades\
		[88, 50, 30, 56]\cf0 \
*NOTE .append() can only take one argument (input) so you can\'92t pass in 2 items\
*NOTE appending a list B onto a list A will result in List B having 1 item that is the entire List B. \
*NOTE .append method DOES NOT return a new list, it merely modifies the original one\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 \ul \ulc0 - combining lists
\f0\b0 \ulnone \
ex. 	\
	\cf4 >>> list1 = [1,2,3]\
	>>> list2 = [4,5,6]\
	>>> merged_list = list1 + list2\
	>>> print(merged_list)\
	output:\cf0 \
	[1,2,3,4,5,6]\
\
- 
\f1\b comments
\f0\b0 : notes that help people understand the code. This don\'92t get executed as code\
	\
- inline comment 
\f1\b #
\f0\b0  ex:\
	>>> grades = [1, 2, 3, 4]  
\f3\i # this is a list of grades
\f0\i0 \
	- single-line comment # spans the full line and good for separating code into sections\
	- multiple line comment: wrap with triple \'91 with open and close\
	>>> \'91 \'91 \'91\
		comments\
		comments\
	>>> \'91 \'91 \'91 \
\
- 
\f1\b index
\f0\b0 : the position of an item in a list. \ul first position starts at 0\ulnone . This is called zero indexing. \
NOTE* Matlab does not have zero indexing (starts at 1). \
\
- selecting item from index. Use \cf2 [position_here]\cf0  to select item example\
	>>> grades = [88, 100, 56]\
	>>> first_value = 
\f1\b \cf5 grades[0] 
\f0\b0 \cf0 \
	>>> first_value\
		first_value = 88\
\
\
- \cf2 l
\f1\b en() 
\f0\b0 \cf0 function. Takes in only 1 argument. Returns length, or number of items in a list or object\
	>>> cities = [\'91NYC\'92, \'91manila\'92]\
	>>> length_cities = len(cities) \
	>>> length_cities\
		2\
\
	Ex 2:\
	>>> best_city = \'93NYC\'94\
	>>> len(best_city)\
		3\
	\
- 
\f1\b slicing
\f0\b0 : returns a new list. Allows one to \'93slice\'94 a list or to retrieve say items 10-50 in a list of 100. \
- value of starting slice is and in-between ending is returned, but \ul value of end slice is NOT returned \ulnone \
- Use colon : to slice. Example:\
	>>> gpa = [2, 3, 4, 1, 3]\
	>>> two_four = gpa
\f1\b \cf2 [2:4]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 	>>> two_four \
		[4, 1]\
	*note how the item in the 4th position is not returned. To return/slice something that includes the last end slice, just add 1. Ex\
	>>> gpa = [2, 3, 4, 1, 3]\
	>>> two_four = gpa
\f1\b \cf2 [2:5]\

\f0\b0 \cf0 	>>> two_four \
		[4, 1, 3]\
\
	selecting last two items in list example:\
	>>> gpa = [2, 3, 4, 4]\
	>>> gpa_last_two = \cf2 gpa[2:len(gpa)]\cf0 \
		[4, 4]\
	or\
	>>> gpa_last_two = gpa[len(gpa)-2: len(gpa)]\
		[4, 4]\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 \ul \ulc0 - how to refer to the last item from a list
\f0\b0 \ulnone \
	>>> cities = [\'91nyc\'92, \'91manila\'92, \'91boca\'92]\
	>>> last = cities[len(cities)-1]\
	>>> print(last)\
	output:\
	boca\
	\ul NOTE* need to make 
\f1\b \cf3 \ulc3 len() - 1 
\f0\b0 \cf0 \ulc0 because indexing starts at 0 with python!!!\ulnone \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Questions\
1. what\'92s the best way to combine lists?\
ex. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 	>>> list1 = [1, 3, 5]\
	>>> list2 = [2, 3, 10]\
	I want to make a list3 = [1, 3, 5, 2, 3, 10]
\f1\b \
\

\f0\b0 \
2. why am i getting the whole list1 as the output?\
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs24 \cf6 \cb7 \expnd0\expndtw0\kerning0
list1 = [\cf8 '1'\cf6 , \cf8 '2'\cf6 ]\cb1 \
\cb7 list1.append(list1)\cb1 \
\cf9 \cb7 print\cf6 (list1[\cf10 2\cf6 ])\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 output: \
['1', '2', [...]]\
\
\
3. why does these produce different outputs?\
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs24 \cf6 \cb7 \expnd0\expndtw0\kerning0
fruit = [\cf10 1\cf6 ]\cb1 \
\cb7 length_fruit = \cf9 len\cf6 (fruit[\cf10 0\cf6 ])\cb1 \
\cf9 \cb7 print\cf6 (length_fruit)\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 output: \
  length_fruit = len(fruit[0])\
TypeError: object of type 'int' has no len()\
\
versus\
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs24 \cf6 \cb7 \expnd0\expndtw0\kerning0
fruit = [\cf10 1\cf6 ]\cb1 \
\cb7 length_fruit = \cf9 len\cf6 (fruit)\cb1 \
\cf9 \cb7 print\cf6 (length_fruit)\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 output:\
1\
\
\
}