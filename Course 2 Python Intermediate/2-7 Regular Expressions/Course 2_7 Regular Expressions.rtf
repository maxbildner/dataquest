{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red36\green255\blue255;\red251\green0\blue7;
\red36\green255\blue255;\red251\green0\blue7;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red194\green126\blue101;\red167\green197\blue152;\red70\green137\blue204;\red89\green138\blue67;\red212\green214\blue154;
}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c4983\c100000\c100000;\cssrgb\c100000\c12195\c0;
\cssrgb\c4983\c100000\c100000;\cssrgb\c100000\c12195\c0;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;\cssrgb\c33725\c61176\c83922;\cssrgb\c41569\c60000\c33333;\cssrgb\c86275\c86275\c66667;
}
\margl1440\margr1440\vieww14180\viewh24320\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Dataquest Notes\
1/8/19\
Step 1: Python Introduction\
Course 2: Python Programming Intermediate\
Mission 7: Regular Expressions\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 1. 
\f1\b \cf3 Regular Expressions (regex)
\f0\b0 \cf2 \
- a sequence of characters that describes a search pattern\
- we can use regular expressions to search for and extract data\
ex. find a regular expression for the strings list below:\
\cf4 	strings = [\'91data science\'92, \'91big data\'92, \'91metadata\'92]\
	regex = \'91data\'92\
\cf2 \
\
2. \cf3 re module\cf2 \
- module that helps us work with regular expressions\
- see {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/re.html"}}{\fldrslt https://docs.python.org/3/library/re.html}} for details\
\
\
\
3. special character dot \'93
\f1\b \cf3 .
\f0\b0 \cf2 \'94  in re module\
- indicates that any character can be put in its place\
ex1.\
	regular expression = \'93a.c\'94\
	example matches: \'91aac\'92, \'91abc\'92, \'91acc\'92\
	examples that don\'92t match: \'91add\'92, \'91adhd\'92, \'91crash\'92\
\
ex2. find a regular expression that is three characters long and matches every string in strings\
	strings = [\'91bat\'92, \'91robotics\'92, \'91megabyte\'92]\
	regex = \'91b.t\'92\
\
\
4. special character caret symbol  \'93
\f1\b \cf5 ^
\f0\b0 \cf2 \'94 in the re module \
- match the beginning of a string\
ex1. 
\f1\b ^a
\f0\b0  will match all strings that start with a\
\
5. special character dollar sign symbol \'93
\f1\b \cf5 $
\f0\b0 \cf2 \'94 in the re module\
- match the end of a string\
ex1. 
\f1\b a$
\f0\b0  will match all strings that end with a\
ex2. find a regular expression that is 7 characters long and matches every string in strings\
	strings = [\'91better not put too much\'92, \'91butter in the\'92, \'91batter\'92]\
	regex = \'91^b.tter\'92\
	\
\
\
6. 
\f1\b \cf5 re.search()
\f0\b0 \cf2  function in the re module\
- syntax:\
	\cf6 re.search(___, ___)\
	re.search(regex, string)\cf2 \
- can check whether string is a match for regex\
- if it is, the expression will return a match object, if it isn\'92t, it will return None\
ex. \
	
\f2\fs24 \cf7 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 import\cf9 \strokec9  re\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb8 	strings = [\cf10 \strokec10 'scooby'\cf9 \strokec9 , \cf10 \strokec10 'dooby'\cf9 \strokec9 , \cf10 \strokec10 'poopy'\cf9 \strokec9 , \cf10 \strokec10 'ruby'\cf9 \strokec9 , \cf10 \strokec10 'apples'\cf9 \strokec9 ]\cb1 \
\cb8 	regex_count = \cf11 \strokec11 0\cf9 \cb1 \strokec9 \
\cf7 \cb8 \strokec7 	for\cf9 \strokec9  each \cf12 \strokec12 in\cf9 \strokec9  strings:\cb1 \
\cb8     		\cf7 \strokec7 if\cf9 \strokec9  re.search(\cf10 \strokec10 'oo.y'\cf9 \strokec9 ,each) \cf12 \strokec12 is\cf9 \strokec9  \cf12 \strokec12 not\cf9 \strokec9  \cf12 \strokec12 None\cf9 \strokec9 :          \cf13 \strokec13 # if the regex is in each\cf9 \cb1 \strokec9 \
\cb8         		regex_count += \cf11 \strokec11 1\cf9 \strokec9                             \cf13 \strokec13 # increase regex_count by 1\cf9 \cb1 \strokec9 \
\cf14 \cb8 \strokec14 	print\cf9 \strokec9 (regex_count)\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 	output:\
	3\
\
	\
\
7. special character brackets \'91
\f1\b \cf5 [ ]
\f0\b0 \cf2 \'92 to indicate that any character within them can fill the space\
ex. the regex [bcr]at would match with the strings: \'91bat\'92, \'91cat\'92, and \'91rat\'92, but nothing else\
	the [ ]\'92s indicate that the first character in the regex can either be \'91b\'92, \'91c\'92, or \'91r\'92\
\
\
\
\
8. 
\f1\b \cf5 escape
\f0\b0 \cf2  special character backslash- 
\f1\b \cf5 \\
\f0\b0 \cf2 \
- escaping a character means that you don\'92t want the character to do anything special\
- ex. what if I wanted to print the quotation \'91\'93 symbol? otherwise python would make the \'91 a string\
	\cf6 >>> print(\'93  \'93  \'93)\cf2  	# would give an error because python thinks the second \'93 is the end\
solution:\
	\cf6 >>>	print( \'93  \\\'94  \'93)\cf2 \
	output:\
	\'93\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 9. 
\f1\b \cf5 |
\f0\b0 \cf0  \ul vertical line special character\ulnone  (NOT capital i I character)\
- means either character\
- combines regular expressions\
ex. \'91cat | dog\'92 regex would match \'91catfish\'92 and \'91hotdog\'92\
\
\
\
10. 
\f1\b \cf5 re.sub() function
\f0\b0 \cf0  from re module\
- takes in:\
	1. pattern- the regex to match\
	2. repl- the string that should replace the substring matches\
	3. string- the string containing the pattern we want to match\
- returns modified string input (if there is a pattern match)\
- NOTE* repl argument is an ordinary string, it\'92s not a regex, so you don\'92t need to escape characters like \'91[\'91\
\
\
\
11. 
\f1\b \cf5 special dash character -
\f0\b0 \cf0  for re module\
[0-9] is the same as 0 through 9\
[a-z] is the same as a through z\
\
\
\
\
12. using curly brackets \cf5 __ 
\f1\b \cf5 \{\cf6 __\cf5 \}
\f0\b0 \cf0 \'92s to indicate that a pattern should repeat (re module)\
-\cf6  ___\cf0  equals number of times you want the \cf5 ___\cf0  pattern to repeat\
ex. 	instead of writing [0-9] [0-9] [0-9] [0-9]\
	we could write [0-9]\{4\}\
\
\
\
\
13. 
\f1\b \cf5 re.findall( __, __ )
\f0\b0 \cf0  function in re module\
- takes in: regex, and string you want to search\
- returns a list of substrings matching the regex\
ex. \
	\cf6 re.findall(\'931-4\'94, \'931234567890\'94)\cf0 \
	would return:\
	[\'911\'92, \'912\'92, \'913\'92, \'914\'92]\
\
\
\
\
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Questions\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 1. are the dot, carrot, dollar sign, and [ ]\'92s only special characters for the re module?
\f1\b \
\

\f0\b0 2. why can\'92t we just search for \'91Serious\'92 in the regex for objective 8?
\f1\b \
\
\
\
\
}