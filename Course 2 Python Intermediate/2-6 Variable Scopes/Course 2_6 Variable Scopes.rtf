{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red36\green255\blue255;\red251\green0\blue7;\red0\green0\blue0;
\red0\green0\blue0;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;\red67\green192\blue160;
\red212\green214\blue154;\red140\green211\blue254;\red89\green138\blue67;\red194\green126\blue101;\red167\green197\blue152;
}
{\*\expandedcolortbl;;\cssrgb\c4983\c100000\c100000;\cssrgb\c100000\c12195\c0;\cssrgb\c0\c1\c1;
\cssrgb\c0\c1\c1;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;\cssrgb\c30588\c78824\c69020;
\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c41569\c60000\c33333;\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;
}
\margl1440\margr1440\vieww14160\viewh20780\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Dataquest Notes\
1/8/19\
Step 1: Python Introduction\
Course 2: Python Programming Intermediate\
Mission 6: Variable Scopes\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 1. built-in functions\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 - already loaded in python, and no need to import (ex. sum() function)\
- find full list of built-in functions here: {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html"}}{\fldrslt https://docs.python.org/3/library/functions.html}}\
- be careful of overwriting built-in functions like sum() below\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 2. \cf2 sum() \cf0 function
\f0\b0 \
- takes in a list or iterable\
- returns the sum of those items in the list or iterable\
ex. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 	>>> 	list1 = [1,1,1]\
		set1 = \{1,1,1\}\
		print(sum(list1))\
		print(sum(set1))\cf4 \
	output:\
	6\
	6\
\
\

\f1\b 3. \cf2 Global Scope\cf4  vs \cf2 Local Scope
\f0\b0 \cf4 \
- Global Scope: location where we define objects (variables/functions, etc) in our python script\
	- whatever happens outside of a function, class\
	-\ul  variables/objects defined inside a function or Class are not accessible outside!!\ulnone \
- Local Scope: location where we define objects (variables/functions, etc) within/inside a function\
	- \'93whatever happens inside a function, stays in that function\'94\
	- each function creates its own local scope\
	- local scopes aren\'92t just isolated from the global scope, local scopes are isolated from each other\
	- i.e. every variable we define in one function won\'92t be accessible within other functions even if\
	the variables are named the same\
\
4. Hierarchy/
\f1\b \cf2 \ul \ulc2 Inheritance
\f0\b0 \cf4 \ulnone  of Scopes\
- if a variable/object isn\'92t defined in a local scope function, python will see if that variable/object is defined\
outside the local scope function and use it if it is\
ex. \
\cf3 	>>>	price = 3800\
		def add_stuff(num):\
			return (num + price)		\cf5 # note how price isn\'92t defined, so price will = 3800 (global scope)\
\cf3 		print(add_stuff(200))\
		print(price)\cf4 \
	output:\
	4000\
	3800\
\
\
\
5. 
\f1\b Limitations of Scope Inheritance
\f0\b0 \
- while we can access the value of a global scope variable inside a local scope, \ul we can\'92t change the value\
of a global variable within a local scope\ulnone \
ex. \
	\cf3 >>> 	a = 2\
		def alter_a():\
			a = a + 1\
			return a\
		alter_a()\cf4 \
	output:\
	UnboundLocalError: local variable 'a' referenced before assignment\
	\
\
\
\

\f1\b 6. \cf2 Global Variables
\f0\b0 \cf4 \
- available across all scopes\
- we can access AND change the value of a global variable inside any global scope or local scope\
- NOTE* while global variables can be handy, we don\'92t recommend using them because they make\
functions dependent on the value of variables in the global scope, and prevent them from being reusable\
in any situation!\
- 
\f1\b \ul create global variables with the \cf2 \ulc2 global keyword
\f0\b0 \cf4 \ulnone \
ex. \
\cf3 	>>> 	a = 4\
		def alter_a():\
			global a\
			a = 2\
			return a\
		print(alter_a())\
		print(a)\cf4 \
	output:\
	2\
	2\
- NOTE* you can\'92t create a global variable and assign value to it on the same line!!\
ex2. what will be the output of the following code below?\
	\cf3 >>>	def new_function():\
			global b\
			b = 20\
		print(b)\cf4 \
- NOTE* t\ul he above code will have an error\ulnone  because b isn\'92t defined. even though b is globally defined in the\
function, it has not been called, so b does not exist yet!\
\
\
\
\
7. \
- Remember 
\f1\b \cf2 \ul \ulc2 LEGBE
\f0\b0 \cf4 \ulnone , Local, Enclosing, Global, Built-ins, Error\
	- python will look for a variable in the above order!!\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Questions\
1. why isn\'92t the variable scoobydoo being recognized here?:\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b0\fs24 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 class\cf8 \strokec8  \cf9 \strokec9 Dataset\cf8 \strokec8 :\cb1 \
\cb7     \cf6 \strokec6 def\cf8 \strokec8  \cf10 \strokec10 __init__\cf8 \strokec8 (\cf11 \strokec11 self\cf8 \strokec8 ,\cf11 \strokec11 data\cf8 \strokec8 ): \cf12 \strokec12 # takes in data list\cf8 \cb1 \strokec8 \
\cb7         \cf6 \strokec6 self\cf8 \strokec8 .data = data\cb1 \
\cb7     scoobydoo = \cf13 \strokec13 "scoobydoo2"\cf8 \cb1 \strokec8 \
\cb7     \cf6 \strokec6 def\cf8 \strokec8  \cf10 \strokec10 scooby\cf8 \strokec8 (\cf11 \strokec11 self\cf8 \strokec8 ):  \cf12 \strokec12 # method takes in self, prints scoobydoo variable\cf8 \cb1 \strokec8 \
\cb7         \cf10 \strokec10 print\cf8 \strokec8 (scoobydoo)\cb1 \
\
\cb7 list1 = [\cf14 \strokec14 1\cf8 \strokec8 ,\cf14 \strokec14 2\cf8 \strokec8 ,\cf14 \strokec14 3\cf8 \strokec8 ]\cb1 \
\cb7 pet = Dataset(list1)\cb1 \
\cb7 pet.scooby()\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 output:\
Traceback (most recent call last):\
  File "/Users/Lin/Projects/Dataquest/practice.py", line 1139, in <module>\
    pet.scooby()\
  File "/Users/Lin/Projects/Dataquest/practice.py", line 1133, in scooby\
    print(scoobydoo)\
NameError: name 'scoobydoo' is not defined
\f1\b \
\
\
\
\
\
\
\
}